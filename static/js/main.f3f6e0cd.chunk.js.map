{"version":3,"sources":["components/SearchBar.js","components/Movie.js","components/MovieList.js","components/SelectedMovie.js","components/MovieCard.js","App.js","serviceWorker.js","index.js"],"names":["SearchBar","handleSubmit","event","preventDefault","search","document","querySelector","value","alert","props","onValueChange","className","onSubmit","this","type","placeholder","React","Component","Movie","handleClick","title","selectedMovie","window","scrollTo","src","year","onClick","alt","MovieList","movies","map","movie","id","imdbID","key","Poster","Title","Year","newSearch","SelectedMovie","actors","director","imdb","imdbRating","plot","runtime","MovieCard","Actors","Director","Plot","Runtime","App","handleChange","setState","query","url","fetch","then","response","json","data","Response","Search","state","hasOwnProperty","length","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f3f6e0cd.chunk.js","sourcesContent":["import React from 'react';\nimport '../css/SearchBar.css'\n\nclass SearchBar extends React.Component {\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    const search = document.querySelector('.movie-search');\n\n    if (search.value === '') {\n      alert(\"Please Enter a Film\")\n    } else\n    this.props.onValueChange('s', search.value);\n  }\n\n  render() {\n    return(\n      <div className=\"search-bar\">\n\n        <form className=\"movie-selector\" onSubmit={this.handleSubmit} >\n          <input\n            type=\"text\"\n            placeholder=\"Search for a Film\"\n            className=\"movie-search\"\n          />\n          <button type=\"submit\" className=\"sub-button\">Find Film!</button>\n        </form>\n\n      </div>\n    )\n  }\n}\n\nexport default SearchBar;\n","import React from 'react';\nimport '../css/Movie.css'\n\nclass Movie extends React.Component {\n\n\n  handleClick = () => {\n    const title = this.props.title;\n    this.props.selectedMovie('t', title);\n    window.scrollTo(0, 0);\n  }\n\n  render() {\n    const src = this.props.src;\n    const title = this.props.title;\n    const year = this.props.year;\n    const pic = 'https://images.unsplash.com/photo-1558544097-065d1a4471a0?ixlib=rb-1.2.1&auto=format&fit=crop&w=762&q=80'\n    return(\n      <div className=\"movie\" onClick={this.handleClick}>\n        <img src={src === \"N/A\" ? pic : src} alt={title} />\n        <div className=\"movie-info\">\n          <p className=\"movie-title\">{title} ({year})</p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Movie;\n","import React from 'react';\nimport Movie from './Movie';\n\nimport '../css/MovieList.css'\n\nconst MovieList = (props) => {\n  return (\n    <div className=\"movie-list\">\n      {props.movies.map(movie =>\n        <Movie\n          id={movie.imdbID}\n          key={movie.imdbID}\n          src={movie.Poster}\n          alt={movie.Title}\n          title={movie.Title}\n          year={movie.Year}\n          selectedMovie={props.newSearch}\n        />\n      )}\n    </div>\n  )\n\n}\n\n\nexport default MovieList;\n","import React from 'react';\nimport '../css/SelectedMovie.css'\n\n\nconst SelectedMovie = (props) => {\n  const src = props.src;\n  const title = props.title;\n  const year = props.year;\n  const actors = props.actors;\n  const pic = 'https://images.unsplash.com/photo-1558544097-065d1a4471a0?ixlib=rb-1.2.1&auto=format&fit=crop&w=762&q=80';\n  const director = props.director;\n  const imdb = props.imdbRating;\n  const plot = props.plot;\n  const runtime = props.runtime;\n\n  return(\n    <div className=\"selected-movie\">\n      <div className=\"poster\">\n        <img src={src === \"N/A\" ? pic : src} alt={title} />\n      </div>\n      <div className=\"info\">\n        <p className=\"one-title\">{title} ({year})</p>\n        <p className=\"runtime\"><strong>Runtime:</strong> {runtime}</p>\n        <p className=\"director\"><strong>Director:</strong> {director}</p>\n        <p className=\"actors\"><strong>Stars:</strong> {actors}</p>\n        <p className=\"imdb\"><strong>IMDb Rating:</strong> {imdb}/10</p>\n        <p className=\"plot\">{plot}</p>\n      </div>\n    </div>\n  )\n}\n\nexport default SelectedMovie;\n","import React from 'react';\nimport SelectedMovie from './SelectedMovie';\nimport '../css/MovieCard.css'\n\nconst MovieCard = (props) => {\n  return(\n    <div className=\"movie-card\">\n      <SelectedMovie\n        id={props.movie.imdbID}\n        key={props.movie.imdbID}\n        src={props.movie.Poster}\n        alt={props.movie.Title}\n        title={props.movie.Title}\n        year={props.movie.Year}\n        actors={props.movie.Actors}\n        director={props.movie.Director}\n        imdbRating={props.movie.imdbRating}\n        plot={props.movie.Plot}\n        runtime={props.movie.Runtime}\n\n      />\n    </div>\n  )\n}\n\nexport default MovieCard;\n","import React from 'react';\nimport './css/App.css';\n\nimport SearchBar from './components/SearchBar';\nimport MovieList from './components/MovieList';\nimport SelectedMovie from './components/SelectedMovie';\nimport MovieCard from './components/MovieCard';\n\n\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      search: '',\n      movies: [],\n      selectedMovie: {},\n    };\n  }\n\n  handleChange = (event) => {\n    this.setState({search: event});\n  }\n\n  search = (type, query) => {\n    let url = `https://www.omdbapi.com/?apikey=924ba45c&${type}=${query}`\n\n    if (type === 's') {\n      fetch(url)\n        .then(response => response.json())\n        .then(data => data.Response === 'True' ? this.setState({\n            movies: data.Search,\n            selectedMovie: {}\n          }) :\n          alert(\"Film not found. Please search again\")\n        )\n    } else\n      fetch(url)\n        .then(response => response.json())\n        .then(data => this.setState({selectedMovie: data}))\n  }\n\n  render() {\n    return (\n      <div className=\"app-container\">\n        <SearchBar\n          onValueChange={this.search}\n        />\n\n        <div className=\"display-container\">\n          {this.state.selectedMovie.hasOwnProperty('Title') ? <MovieCard movie={this.state.selectedMovie} /> : false}\n\n          {this.state.movies.length > 0 ? <h3 className=\"select-prompt\">Select a Film to see more info</h3> : false}\n          <MovieList movies={this.state.movies} newSearch={this.search} />\n        </div>\n\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './css/index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}